import { Pattern, txt, rgx, seq, rep, any, opt } from "./pattern"

export const name = rgx(/[a-z]+/i).then(s => s.toLowerCase());
export const char = rgx(/[^"&\[]/i);
export const wsp = rgx(/\s+/);
export const text = rep(char).then(r => r.join(''));
export const quoted = seq(txt('"'), rep(char), txt('"')).then(r => r[1].join(''));
export const attr = seq(name, txt("="), quoted).then(r => ({ name: r[0], value: r[2] }));
export const attrs = rep(attr, wsp).then(r => {
    const m = {};
    r.forEach(a => (m[a.name] = a.value));
    return m;
});
export const open = seq(txt("["), name, opt(wsp), opt(attrs), txt("]")).then(r => ({ name: r[1], attrs: r[3] }))
export const close = seq(txt("[/"), name, txt("]")).then(r => r[1]);

const subnode = new Pattern("subnode", (str: string, pos: number) => node.exec(str, pos));
export const node = seq(open, rep(any(text, subnode)), close).then(r => ({ name: r[0].name, attrs: r[0].attrs, nodes: r[1] }));
